#include "cache.h"

const int R_MAX = 100;
const int SCORE_MAX = 31;
const int BAD_SCORE = 5;
static int O = 0;
vector<uint64_t> RR;
vector<uint64_t> delay_queue;
const int delay_queue_size = 23;
const int maxsize = 64;
static int r_count = 0;
const int offsets[26] = {1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 45, 48, 50, 54, 64};
static int scores[26] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
static int i_count = 0;
static bool pref_on = true;

void CACHE::l2c_prefetcher_initialize()
{
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
  if (type != LOAD)
    return metadata_in;

  // SCORE_MAX, ROUND_MAX, i_count, r_count check
  // 0) Update r_count after a round
  if (i_count == 26)
  {
    i_count = 0;
    r_count++;
  }
  // // 1) Reset after a learning phase
  // if (r_count == R_MAX || *max_element(scores, scores + 26) >= SCORE_MAX)
  // {
  //   r_count = 0;
  //   O = distance(scores, max_element(scores, scores + 26));
  //   for (int i = 0; i < 26; i++)
  //   {
  //     scores[i] = 0;
  //   }
  // }

  // Switching on/off Prefetcher
  if (r_count == R_MAX)
  {
    if (*max_element(scores, scores + 26) <= BAD_SCORE)
    {
      pref_on = false;
      // r_count = 0;
    }
    else
    {
      r_count = 0;
      O = distance(scores, max_element(scores, scores + 26));
      for (int i = 0; i < 26; i++)
      {
        scores[i] = 0;
      }
      pref_on = true;
    }
  }
  else if (*max_element(scores, scores + 26) >= SCORE_MAX)
  {
    r_count = 0;
    O = distance(scores, max_element(scores, scores + 26));
    for (int i = 0; i < 26; i++)
    {
      scores[i] = 0;
    }
    pref_on = true;
  }

  if (pref_on)
  {
    uint64_t pf_addr = ((addr >> LOG2_BLOCK_SIZE) + offsets[O]) << LOG2_BLOCK_SIZE;

    // DELAY QUEUE
    // Adding address into delay queue when address is prefetched once from somewhere
    if (block[get_set(addr)][get_way(addr, get_set(addr))].prefetch || cache_hit == 0)
    {
      if (delay_queue.size() < delay_queue_size)
      {
        delay_queue.push_back(addr);
      }
      else
      {
        // Adding into RR table
        uint64_t rr_addr = delay_queue[0];
        delay_queue.erase(delay_queue.begin());
        if (find(RR.begin(), RR.end(), rr_addr) == RR.end())
        {
          if (RR.size() < maxsize)
          {
            RR.push_back(rr_addr);
          }
          else
          {
            RR.erase(RR.begin());
            RR.push_back(rr_addr);
          }
        }
        delay_queue.push_back(addr);
      }
    }

    // Finding address - offset in RR
    uint64_t ff_addr = ((addr >> LOG2_BLOCK_SIZE) - offsets[i_count]) << LOG2_BLOCK_SIZE;
    vector<uint64_t>::iterator it = std::find(RR.begin(), RR.end(), ff_addr);
    if (it != RR.end())
    {
      scores[i_count]++;
    }

    DP(if (warmup_complete[cpu]) {
      cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr >> LOG2_BLOCK_SIZE);
      cout << " pf_cl: " << (pf_addr >> LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit
           << " type: " << +type << endl;
    });

    i_count++;

    // Adding addr - O if addr is PREFETCHed from somewhere
    // if ((type == PREFETCH && cache_hit == 1 || cache_hit == 0) && pf_addr >> LOG2_BLOCK_SIZE == addr >> LOG2_BLOCK_SIZE)
    if (type == PREFETCH)
    {
      uint64_t f_addr = ((addr >> LOG2_BLOCK_SIZE) - offsets[O]) << LOG2_BLOCK_SIZE;
      if (find(RR.begin(), RR.end(), f_addr) == RR.end())
      {
        if (RR.size() < maxsize)
        {
          RR.push_back(f_addr);
        }
        else
        {
          RR.erase(RR.begin());
          RR.push_back(f_addr);
        }
      }
    }

    if ((block[get_set(addr)][get_way(addr, get_set(addr))].prefetch && cache_hit == 1 || cache_hit == 0) && pf_addr >> LOG2_PAGE_SIZE == addr >> LOG2_PAGE_SIZE)
    {
      prefetch_line(ip, addr, pf_addr, FILL_L2, 0);
    }
  }
  else
  {
    // Writing code for prefetcher is off
    uint64_t pf_addr = ((addr >> LOG2_BLOCK_SIZE) + offsets[O]) << LOG2_BLOCK_SIZE;

    // DELAY QUEUE
    // Adding address into delay queue when address is prefetched once from somewhere
    if (block[get_set(addr)][get_way(addr, get_set(addr))].prefetch || cache_hit == 0)
    {
      if (delay_queue.size() < delay_queue_size)
      {
        delay_queue.push_back(addr);
      }
      else
      {
        // Adding into RR table
        uint64_t rr_addr = delay_queue[0];
        delay_queue.erase(delay_queue.begin());
        if (find(RR.begin(), RR.end(), rr_addr) == RR.end())
        {
          if (RR.size() < maxsize)
          {
            RR.push_back(rr_addr);
          }
          else
          {
            RR.erase(RR.begin());
            RR.push_back(rr_addr);
          }
        }
        delay_queue.push_back(addr);
      }
    }

    // Finding address - offset in RR
    uint64_t ff_addr = ((addr >> LOG2_BLOCK_SIZE) - offsets[i_count]) << LOG2_BLOCK_SIZE;
    vector<uint64_t>::iterator it = std::find(RR.begin(), RR.end(), ff_addr);
    if (it != RR.end())
    {
      scores[i_count]++;
    }

    DP(if (warmup_complete[cpu]) {
      cout << "[" << NAME << "] " << __func__ << hex << " base_cl: " << (addr >> LOG2_BLOCK_SIZE);
      cout << " pf_cl: " << (pf_addr >> LOG2_BLOCK_SIZE) << " ip: " << ip << " cache_hit: " << +cache_hit
           << " type: " << +type << endl;
    });

    i_count++;

    // Adding addr - O if addr is PREFETCHed from somewhere
    // if ((type == PREFETCH && cache_hit == 1 || cache_hit == 0) && pf_addr >> LOG2_BLOCK_SIZE == addr >> LOG2_BLOCK_SIZE)
    if (type == PREFETCH)
    {
      uint64_t f_addr = ((addr >> LOG2_BLOCK_SIZE) - offsets[O]) << LOG2_BLOCK_SIZE;
      if (find(RR.begin(), RR.end(), f_addr) == RR.end())
      {
        if (RR.size() < maxsize)
        {
          RR.push_back(f_addr);
        }
        else
        {
          RR.erase(RR.begin());
          RR.push_back(f_addr);
        }
      }
    }
  }
  return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
}
